[
  {
    "name": "assertAlgorithms",
    "filePath": "packages/js-crypto-aes/src/aes.js",
    "lines": [
      {
        "lineNumber": 9,
        "line": "/**"
      },
      {
        "lineNumber": 10,
        "line": " * Check if the given algorithm spec is valid."
      },
      {
        "lineNumber": 11,
        "line": " * @param {String} name - Name of the specified algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 12,
        "line": " * @param {Uint8Array} iv - IV byte array if required"
      },
      {
        "lineNumber": 13,
        "line": " * @param {Number} tagLength - Authentication tag length if required"
      },
      {
        "lineNumber": 14,
        "line": " * @throws {Error} - Throws if UnsupportedAlgorithm, InvalidArguments, InvalidIVLength, or InvalidTagLength."
      },
      {
        "lineNumber": 15,
        "line": " */"
      },
      {
        "lineNumber": 16,
        "line": "const assertAlgorithms = ({name, iv, tagLength}) => {"
      }
    ],
    "codeParams": [
      "*"
    ],
    "docParams": [
      "name",
      "iv",
      "tagLength"
    ]
  },
  {
    "name": "encrypt",
    "filePath": "packages/js-crypto-aes/src/aes.js",
    "lines": [
      {
        "lineNumber": 29,
        "line": "/**"
      },
      {
        "lineNumber": 30,
        "line": " * Encrypt data with AES"
      },
      {
        "lineNumber": 31,
        "line": " * @param {Uint8Array} msg - Message to be encrypted."
      },
      {
        "lineNumber": 32,
        "line": " * @param {Uint8Array} key - The symmetric key used to encrypt the message."
      },
      {
        "lineNumber": 33,
        "line": " * @param {String} [name = 'AES-GCM'] - Name of the specified algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 34,
        "line": " * @param {Uint8Array} [iv] - Byte array of the initial vector if required."
      },
      {
        "lineNumber": 35,
        "line": " * @param {Uint8Array} [additionalData = new Uint8Array([])] - Byte array of additional data if required."
      },
      {
        "lineNumber": 36,
        "line": " * @param {Number} [tagLength = params.ciphers[name].tagLength] - Authentication tag length if required."
      },
      {
        "lineNumber": 37,
        "line": " * @return {Promise<Uint8Array>} - Encrypted message."
      },
      {
        "lineNumber": 38,
        "line": " * @throws {Error} - Throws if InvalidArguments, FaildToEncryptWeb/Node, or UnsupportedEnvironment (no webcrypto/nodecrypto)."
      },
      {
        "lineNumber": 39,
        "line": " */"
      },
      {
        "lineNumber": 40,
        "line": "export const encrypt = async (msg, key, {name = 'AES-GCM', iv, additionalData=new Uint8Array([]), tagLength}) => {"
      }
    ],
    "codeParams": [
      "msg",
      "key",
      "*"
    ],
    "docParams": [
      "msg",
      "key",
      "name",
      "iv",
      "additionalData",
      "tagLength"
    ]
  },
  {
    "name": "decrypt",
    "filePath": "packages/js-crypto-aes/src/aes.js",
    "lines": [
      {
        "lineNumber": 59,
        "line": "/**"
      },
      {
        "lineNumber": 60,
        "line": " * Decrypt data with AES"
      },
      {
        "lineNumber": 61,
        "line": " * @param {Uint8Array} data - Byte array of encrypted data."
      },
      {
        "lineNumber": 62,
        "line": " * @param {Uint8Array} key - Byte array of symmetric key to be used for decryption."
      },
      {
        "lineNumber": 63,
        "line": " * @param {String} [name = 'AES-GCM'] - Name of the specified algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 64,
        "line": " * @param {Uint8Array} [iv] - Byte array of the initial vector if required."
      },
      {
        "lineNumber": 65,
        "line": " * @param {Uint8Array} [additionalData = new Uint8Array([])] - Byte array of additional data if required."
      },
      {
        "lineNumber": 66,
        "line": " * @param {Number} [tagLength = params.ciphers[name].tagLength] - Authentication tag length if required."
      },
      {
        "lineNumber": 67,
        "line": " * @return {Promise<Uint8Array>} - Decrypted plaintext message."
      },
      {
        "lineNumber": 68,
        "line": " * @throws {Error} - Throws if InvalidArguments, FailedToDecryptWeb/Node, or UnsupportedEnvironment (no webcrypto/nodecrypto)."
      },
      {
        "lineNumber": 69,
        "line": " */"
      },
      {
        "lineNumber": 70,
        "line": "export const decrypt = async (data, key, {name='AES-GCM', iv, additionalData=new Uint8Array([]), tagLength}) => {"
      }
    ],
    "codeParams": [
      "data",
      "key",
      "*"
    ],
    "docParams": [
      "data",
      "key",
      "name",
      "iv",
      "additionalData",
      "tagLength"
    ]
  },
  {
    "name": "wrapKey",
    "filePath": "packages/js-crypto-aes/src/nodeapi.js",
    "lines": [
      {
        "lineNumber": 6,
        "line": "/**"
      },
      {
        "lineNumber": 7,
        "line": " * Node.js KeyWrapping function simply uses encrypt function."
      },
      {
        "lineNumber": 8,
        "line": " * @param keyToBeWrapped {Uint8Array} - plaintext key"
      },
      {
        "lineNumber": 9,
        "line": " * @param wrappingKey {Uint8Array} - wrapping key"
      },
      {
        "lineNumber": 10,
        "line": " * @param name {string} - 'AES-KW'"
      },
      {
        "lineNumber": 11,
        "line": " * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'"
      },
      {
        "lineNumber": 12,
        "line": " * @param nodeCrypto {Object} - NodeCrypto object"
      },
      {
        "lineNumber": 13,
        "line": " * @return {Uint8Array} - Unwrapped Key"
      },
      {
        "lineNumber": 14,
        "line": " */"
      },
      {
        "lineNumber": 15,
        "line": "export const wrapKey = ("
      }
    ],
    "codeParams": [
      "keyToBeWrapped",
      "wrappingKey",
      "*",
      "nodeCrypto"
    ],
    "docParams": [
      "keyToBeWrapped",
      "wrappingKey",
      "name",
      "iv",
      "nodeCrypto"
    ]
  },
  {
    "name": "unwrapKey",
    "filePath": "packages/js-crypto-aes/src/nodeapi.js",
    "lines": [
      {
        "lineNumber": 22,
        "line": "/**"
      },
      {
        "lineNumber": 23,
        "line": " * Node.js KeyUnwrapping function as well as keyWrapping"
      },
      {
        "lineNumber": 24,
        "line": " * @param wrappedKey {Uint8Array} - Wrapped key"
      },
      {
        "lineNumber": 25,
        "line": " * @param unwrappingKey {Uint8Array} - Key used for wrapping"
      },
      {
        "lineNumber": 26,
        "line": " * @param name {string} - 'AES-KW'"
      },
      {
        "lineNumber": 27,
        "line": " * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'"
      },
      {
        "lineNumber": 28,
        "line": " * @param nodeCrypto {Object} - NodeCrypto object"
      },
      {
        "lineNumber": 29,
        "line": " * @return {Uint8Array} - Unwrapped Key"
      },
      {
        "lineNumber": 30,
        "line": " */"
      },
      {
        "lineNumber": 31,
        "line": "export const unwrapKey = ("
      }
    ],
    "codeParams": [
      "wrappedKey",
      "unwrappingKey",
      "*",
      "nodeCrypto"
    ],
    "docParams": [
      "wrappedKey",
      "unwrappingKey",
      "name",
      "iv",
      "nodeCrypto"
    ]
  },
  {
    "name": "encrypt",
    "filePath": "packages/js-crypto-aes/src/nodeapi.js",
    "lines": [
      {
        "lineNumber": 37,
        "line": "/**"
      },
      {
        "lineNumber": 38,
        "line": " * Encrypt plaintext message via AES Node.js crypto API"
      },
      {
        "lineNumber": 39,
        "line": " * @param {Uint8Array} msg - Plaintext message to be encrypted."
      },
      {
        "lineNumber": 40,
        "line": " * @param {Uint8Array} key - Byte array of symmetric key."
      },
      {
        "lineNumber": 41,
        "line": " * @param {String} name - Name of AES algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 42,
        "line": " * @param {Uint8Array} [iv] - Byte array of initial vector if required."
      },
      {
        "lineNumber": 43,
        "line": " * @param {Uint8Array} [additionalData] - Byte array of additional data if required."
      },
      {
        "lineNumber": 44,
        "line": " * @param {Number} [tagLength] - Authentication tag length if required."
      },
      {
        "lineNumber": 45,
        "line": " * @param {Object} nodeCrypto - NodeCrypto object, i.e., require(crypto) in Node.js."
      },
      {
        "lineNumber": 46,
        "line": " * @param wrapKey {Boolean} [false] - true if called as AES-KW"
      },
      {
        "lineNumber": 47,
        "line": " * @return {Uint8Array} - Encrypted message byte array."
      },
      {
        "lineNumber": 48,
        "line": " * @throws {Error} - Throws error if UnsupportedCipher."
      },
      {
        "lineNumber": 49,
        "line": " */"
      },
      {
        "lineNumber": 50,
        "line": "export const encrypt = (msg, key, {name, iv, additionalData, tagLength}, nodeCrypto, wrapKey=false) => {"
      }
    ],
    "codeParams": [
      "msg",
      "key",
      "*",
      "nodeCrypto",
      "wrapKey"
    ],
    "docParams": [
      "msg",
      "key",
      "name",
      "iv",
      "additionalData",
      "tagLength",
      "nodeCrypto",
      "wrapKey"
    ]
  },
  {
    "name": "decrypt",
    "filePath": "packages/js-crypto-aes/src/nodeapi.js",
    "lines": [
      {
        "lineNumber": 97,
        "line": "/**"
      },
      {
        "lineNumber": 98,
        "line": " * Decrypt data through AES Node.js crypto API."
      },
      {
        "lineNumber": 99,
        "line": " * @param {Uint8Array} data - Encrypted message to be decrypted."
      },
      {
        "lineNumber": 100,
        "line": " * @param {Uint8Array} key - Byte array of symmetric key."
      },
      {
        "lineNumber": 101,
        "line": " * @param {String} name - Name of AES algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 102,
        "line": " * @param {Uint8Array} [iv] - Byte array of initial vector if required."
      },
      {
        "lineNumber": 103,
        "line": " * @param {Uint8Array} [additionalData] - Byte array of additional data if required."
      },
      {
        "lineNumber": 104,
        "line": " * @param {Number} [tagLength] - Authentication tag length if required."
      },
      {
        "lineNumber": 105,
        "line": " * @param {Object} nodeCrypto - NodeCrypto object, i.e., require(crypto) in Node.js."
      },
      {
        "lineNumber": 106,
        "line": " * @return {Uint8Array} - Decrypted message byte array."
      },
      {
        "lineNumber": 107,
        "line": " * @param unwrapKey {Boolean} [false] - true if called as AES-KW"
      },
      {
        "lineNumber": 108,
        "line": " * @throws {Error} - Throws error if UnsupportedCipher or DecryptionFailure."
      },
      {
        "lineNumber": 109,
        "line": " */"
      },
      {
        "lineNumber": 110,
        "line": "export const decrypt = (data, key, {name, iv, additionalData, tagLength}, nodeCrypto, unwrapKey=false) => {"
      }
    ],
    "codeParams": [
      "data",
      "key",
      "*",
      "nodeCrypto",
      "unwrapKey"
    ],
    "docParams": [
      "data",
      "key",
      "name",
      "iv",
      "additionalData",
      "tagLength",
      "nodeCrypto",
      "unwrapKey"
    ]
  },
  {
    "name": "wrapKey",
    "filePath": "packages/js-crypto-aes/src/webapi.js",
    "lines": [
      {
        "lineNumber": 4,
        "line": "/**"
      },
      {
        "lineNumber": 5,
        "line": " * WebCrypto KeyWrapping function simply uses encrypt function."
      },
      {
        "lineNumber": 6,
        "line": " * @param keyToBeWrapped {Uint8Array} - plaintext key"
      },
      {
        "lineNumber": 7,
        "line": " * @param wrappingKey {Uint8Array} - wrapping key"
      },
      {
        "lineNumber": 8,
        "line": " * @param name {string} - 'AES-KW'"
      },
      {
        "lineNumber": 9,
        "line": " * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'"
      },
      {
        "lineNumber": 10,
        "line": " * @param nodeCrypto {Object} - crypto.subtle object"
      },
      {
        "lineNumber": 11,
        "line": " * @return {Uint8Array} - Unwrapped Key"
      },
      {
        "lineNumber": 12,
        "line": " */"
      },
      {
        "lineNumber": 13,
        "line": "export const wrapKey = async (keyToBeWrapped, wrappingKey, {name = 'AES-KW', iv}, webCrypto) => {"
      }
    ],
    "codeParams": [
      "keyToBeWrapped",
      "wrappingKey",
      "*",
      "webCrypto"
    ],
    "docParams": [
      "keyToBeWrapped",
      "wrappingKey",
      "name",
      "iv",
      "nodeCrypto"
    ]
  },
  {
    "name": "unwrapKey",
    "filePath": "packages/js-crypto-aes/src/webapi.js",
    "lines": [
      {
        "lineNumber": 28,
        "line": "/**"
      },
      {
        "lineNumber": 29,
        "line": " * WebCrypto KeyUnwrapping function as well as keyWrapping"
      },
      {
        "lineNumber": 30,
        "line": " * @param wrappedKey {Uint8Array} - Wrapped key"
      },
      {
        "lineNumber": 31,
        "line": " * @param unwrappingKey {Uint8Array} - Key used for wrapping"
      },
      {
        "lineNumber": 32,
        "line": " * @param name {string} - 'AES-KW'"
      },
      {
        "lineNumber": 33,
        "line": " * @param iv {Uint8Array} - default is '0xA6A6A6A6A6A6A6A6'"
      },
      {
        "lineNumber": 34,
        "line": " * @param nodeCrypto {Object} - crypto.subtle object"
      },
      {
        "lineNumber": 35,
        "line": " * @return {Uint8Array} - Unwrapped Key"
      },
      {
        "lineNumber": 36,
        "line": " */"
      },
      {
        "lineNumber": 37,
        "line": "export const unwrapKey = async (wrappedKey, unwrappingKey, {name = 'AES-KW', iv}, webCrypto) => {"
      }
    ],
    "codeParams": [
      "wrappedKey",
      "unwrappingKey",
      "*",
      "webCrypto"
    ],
    "docParams": [
      "wrappedKey",
      "unwrappingKey",
      "name",
      "iv",
      "nodeCrypto"
    ]
  },
  {
    "name": "encrypt",
    "filePath": "packages/js-crypto-aes/src/webapi.js",
    "lines": [
      {
        "lineNumber": 51,
        "line": "/**"
      },
      {
        "lineNumber": 52,
        "line": " * Encrypt data through AES of WebCrypto API."
      },
      {
        "lineNumber": 53,
        "line": " * @param {Uint8Array} msg - Plaintext message to be encrypted."
      },
      {
        "lineNumber": 54,
        "line": " * @param {Uint8Array} key - Byte array of symmetric key."
      },
      {
        "lineNumber": 55,
        "line": " * @param {String} name - Name of AES algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 56,
        "line": " * @param {Uint8Array} [iv] - Byte array of initial vector if required."
      },
      {
        "lineNumber": 57,
        "line": " * @param {Uint8Array} [additionalData] - Byte array of additional data if required."
      },
      {
        "lineNumber": 58,
        "line": " * @param {Number} [tagLength] - Authentication tag length if required."
      },
      {
        "lineNumber": 59,
        "line": " * @param {Object} webCrypto - WebCrypto object, i.e., window.crypto.subtle or window.msCrypto.subtle"
      },
      {
        "lineNumber": 60,
        "line": " * @return {Promise<Uint8Array>} - Encrypted data byte array."
      },
      {
        "lineNumber": 61,
        "line": " * @throws {Error} - Throws if UnsupportedCipher."
      },
      {
        "lineNumber": 62,
        "line": " */"
      },
      {
        "lineNumber": 63,
        "line": "export const encrypt = async (msg, key, {name = 'AES-GCM', iv, additionalData, tagLength}, webCrypto) => {"
      }
    ],
    "codeParams": [
      "msg",
      "key",
      "*",
      "webCrypto"
    ],
    "docParams": [
      "msg",
      "key",
      "name",
      "iv",
      "additionalData",
      "tagLength",
      "webCrypto"
    ]
  },
  {
    "name": "decrypt",
    "filePath": "packages/js-crypto-aes/src/webapi.js",
    "lines": [
      {
        "lineNumber": 93,
        "line": "/**"
      },
      {
        "lineNumber": 94,
        "line": " * Decrypt data through AES of WebCrypto API."
      },
      {
        "lineNumber": 95,
        "line": " * @param {Uint8Array} data - Encrypted message to be decrypted."
      },
      {
        "lineNumber": 96,
        "line": " * @param {Uint8Array} key - Byte array of symmetric key."
      },
      {
        "lineNumber": 97,
        "line": " * @param {String} name - Name of AES algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 98,
        "line": " * @param {Uint8Array} [iv] - Byte array of initial vector if required."
      },
      {
        "lineNumber": 99,
        "line": " * @param {Uint8Array} [additionalData] - Byte array of additional data if required."
      },
      {
        "lineNumber": 100,
        "line": " * @param {Number} [tagLength] - Authentication tag length if required."
      },
      {
        "lineNumber": 101,
        "line": " * @param {Object} webCrypto - WebCrypto object, i.e., window.crypto.subtle or window.msCrypto.subtle"
      },
      {
        "lineNumber": 102,
        "line": " * @return {Promise<Uint8Array>} - Decrypted plaintext message."
      },
      {
        "lineNumber": 103,
        "line": " * @throws {Error} - Throws if UnsupportedCipher or DecryptionFailure."
      },
      {
        "lineNumber": 104,
        "line": " */"
      },
      {
        "lineNumber": 105,
        "line": "export const decrypt = async (data, key, {name, iv, additionalData, tagLength}, webCrypto) => {"
      }
    ],
    "codeParams": [
      "data",
      "key",
      "*",
      "webCrypto"
    ],
    "docParams": [
      "data",
      "key",
      "name",
      "iv",
      "additionalData",
      "tagLength",
      "webCrypto"
    ]
  },
  {
    "name": "setCipherParams",
    "filePath": "packages/js-crypto-aes/src/webapi.js",
    "lines": [
      {
        "lineNumber": 136,
        "line": "/**"
      },
      {
        "lineNumber": 137,
        "line": " * Set params for encryption algorithms."
      },
      {
        "lineNumber": 138,
        "line": " * @param {String} name - Name of AES algorithm like 'AES-GCM'."
      },
      {
        "lineNumber": 139,
        "line": " * @param {Uint8Array} [iv] - Byte array of initial vector if required."
      },
      {
        "lineNumber": 140,
        "line": " * @param {Uint8Array} [additionalData] - Byte array of additional data if required."
      },
      {
        "lineNumber": 141,
        "line": " * @param {Number} [tagLength] - Authentication tag length if required."
      },
      {
        "lineNumber": 142,
        "line": " */"
      },
      {
        "lineNumber": 143,
        "line": "const setCipherParams = ({name, iv, additionalData, tagLength}) => {"
      }
    ],
    "codeParams": [
      "*"
    ],
    "docParams": [
      "name",
      "iv",
      "additionalData",
      "tagLength"
    ]
  },
  {
    "name": "fromJwk",
    "filePath": "packages/js-crypto-key-utils/src/asn1enc.js",
    "lines": [
      {
        "lineNumber": 14,
        "line": "/**"
      },
      {
        "lineNumber": 15,
        "line": " * Convert jwk to spki/pkcs8 in string or binary format."
      },
      {
        "lineNumber": 16,
        "line": " * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded."
      },
      {
        "lineNumber": 17,
        "line": " * @param {boolean} outputPublic - Derive public key from private key when true"
      },
      {
        "lineNumber": 18,
        "line": " * @param {AsnFormat} format - 'pem' or 'der'"
      },
      {
        "lineNumber": 19,
        "line": " * @param {boolean} compact - 'true' or 'false' for EC public key compressed representation in der/pem"
      },
      {
        "lineNumber": 20,
        "line": " * @param {String} passphrase - if passphrase is given and the given key is private key, it will be encoded with the passphrase."
      },
      {
        "lineNumber": 21,
        "line": " * @param {AsnEncryptOptionsWithPassphrase} encOptions - ASN.1 encryption options"
      },
      {
        "lineNumber": 22,
        "line": " * @return {Uint8Array|String} - Encoded private key in DER or PEM"
      },
      {
        "lineNumber": 23,
        "line": " */"
      },
      {
        "lineNumber": 24,
        "line": "export const fromJwk = async (jwkey, format, {outputPublic, compact=false, encOptions}) => {"
      }
    ],
    "codeParams": [
      "jwkey",
      "format",
      "*"
    ],
    "docParams": [
      "jwkey",
      "outputPublic",
      "format",
      "compact",
      "passphrase",
      "encOptions"
    ]
  },
  {
    "name": "toJwk",
    "filePath": "packages/js-crypto-key-utils/src/asn1enc.js",
    "lines": [
      {
        "lineNumber": 52,
        "line": "/**"
      },
      {
        "lineNumber": 53,
        "line": " * Convert SPKI/PKCS8 key in string or binary format to JWK."
      },
      {
        "lineNumber": 54,
        "line": " * @param {PEM|DER} key - Key object."
      },
      {
        "lineNumber": 55,
        "line": " * @param {AsnFormat} format - 'pem' or 'der'"
      },
      {
        "lineNumber": 56,
        "line": " * @param {boolean} [outputPublic] - Export public key even from private key if true."
      },
      {
        "lineNumber": 57,
        "line": " * @param {String} [passphrase] - Encrypt private key if passphrase is given."
      },
      {
        "lineNumber": 58,
        "line": " * @return {JsonWebKey} - Obtained key object in JWK format."
      },
      {
        "lineNumber": 59,
        "line": " * @throws {Error} Throws if UnsupportedKeyStructure, UnsupportedKey or InvalidKeyType."
      },
      {
        "lineNumber": 60,
        "line": " */"
      },
      {
        "lineNumber": 61,
        "line": "export const toJwk = async (key, format, {outputPublic, passphrase}) => {"
      }
    ],
    "codeParams": [
      "key",
      "format",
      "*"
    ],
    "docParams": [
      "key",
      "format",
      "outputPublic",
      "passphrase"
    ]
  },
  {
    "name": "fromJwk",
    "filePath": "packages/js-crypto-key-utils/src/octenc.js",
    "lines": [
      {
        "lineNumber": 11,
        "line": "/**"
      },
      {
        "lineNumber": 12,
        "line": " * Convert JWK EC public/private keys to octet form."
      },
      {
        "lineNumber": 13,
        "line": " * Compressed form of EC public key is referred to RFC 5480 {@link https://tools.ietf.org/html/rfc5480}."
      },
      {
        "lineNumber": 14,
        "line": " * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded to SEC1 octet format key."
      },
      {
        "lineNumber": 15,
        "line": " * @param {boolean} [outputPublic] - Export public key even from private key if true."
      },
      {
        "lineNumber": 16,
        "line": " * @param {OctetFormat} [outputFormat='binary'] - 'binary' or 'string'."
      },
      {
        "lineNumber": 17,
        "line": " * @param {boolean} [compact=false] - Export compressed form of public key if true."
      },
      {
        "lineNumber": 18,
        "line": " * @return {JsonWebKey} - Encoded key object in JWK format."
      },
      {
        "lineNumber": 19,
        "line": " */"
      },
      {
        "lineNumber": 20,
        "line": "export const fromJwk = (jwkey, {outputPublic, outputFormat='binary', compact=false}) => {"
      }
    ],
    "codeParams": [
      "jwkey",
      "*"
    ],
    "docParams": [
      "jwkey",
      "outputPublic",
      "outputFormat",
      "compact"
    ]
  },
  {
    "name": "checkLength",
    "filePath": "packages/js-crypto-rsa/src/oaep.js",
    "lines": [
      {
        "lineNumber": 27,
        "line": "/**"
      },
      {
        "lineNumber": 28,
        "line": " * Check OAEP length"
      },
      {
        "lineNumber": 29,
        "line": " * @param {String} mode - 'encrypt' or 'decrypt'"
      },
      {
        "lineNumber": 30,
        "line": " * @param {Number} k - Octet length of modulus length, i.e., n."
      },
      {
        "lineNumber": 31,
        "line": " * @param {Uint8Array} label - OAEP label."
      },
      {
        "lineNumber": 32,
        "line": " * @param {String} hash - Name of hash function."
      },
      {
        "lineNumber": 33,
        "line": " * @param {Number} mLen - Octet length of message to be encrypted."
      },
      {
        "lineNumber": 34,
        "line": " * @param {Number} cLen - the length of ciphertext"
      },
      {
        "lineNumber": 35,
        "line": " * @throws {Error} - Throws if LabelTooLong, MessageTooLong, DecryptionError or InvalidMode."
      },
      {
        "lineNumber": 36,
        "line": " */"
      },
      {
        "lineNumber": 37,
        "line": "export const checkLength = (mode, {k, label, hash, mLen, cLen}) => {"
      }
    ],
    "codeParams": [
      "mode",
      "*"
    ],
    "docParams": [
      "mode",
      "k",
      "label",
      "hash",
      "mLen",
      "cLen"
    ]
  },
  {
    "name": "checkLength",
    "filePath": "packages/js-crypto-rsa/src/pss.js",
    "lines": [
      {
        "lineNumber": 23,
        "line": "/**"
      },
      {
        "lineNumber": 24,
        "line": " * Check PSS Length."
      },
      {
        "lineNumber": 25,
        "line": " * @param {String} mode - 'sign' or 'verify'"
      },
      {
        "lineNumber": 26,
        "line": " * @param {Number} k - Octet length of modulus length, i.e., n."
      },
      {
        "lineNumber": 27,
        "line": " * @param {String} hash - Name of hash function."
      },
      {
        "lineNumber": 28,
        "line": " * @param {Number} saltLength - Length of salt."
      },
      {
        "lineNumber": 29,
        "line": " * @throws {Error} - Throws if Inconsistent, EncodingError, or InvalidMode."
      },
      {
        "lineNumber": 30,
        "line": " */"
      },
      {
        "lineNumber": 31,
        "line": "export const checkLength = (mode, {k, hash, saltLength}) => {"
      }
    ],
    "codeParams": [
      "mode",
      "*"
    ],
    "docParams": [
      "mode",
      "k",
      "hash",
      "saltLength"
    ]
  }
]